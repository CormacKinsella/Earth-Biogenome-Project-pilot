// CUSTOM Resource allocations
process {
    // COMPARE_ASSEMBLIES
    withName: 'QUAST' {
        cpus       = { Math.min(6, consensus instanceof List ? consensus.size() : 1 ) }
    }

    // EVALUATE ASSEMBLIES 
    withName: 'BUSCO' {
        time   = { input.meta.genome_size > 3000000000 ? 4.d : 2.d }
        cpus   = { input.meta.genome_size > 3000000000 ? 40 : 30 }
        memory = { input.meta.genome_size > 3000000000 ? 230.GB : 128.GB }
    }

    // FCS
    withName: 'FCSGX_FETCHDB' {
        time       = 2.d
    }

    withName: 'FCSGX_RUNGX' {
        cpus       = 20
        memory     = 1024.GB
        time       = 1.h
    }

    // scaffolding - pairtools parse 
    // runs single threaded but uses 3 decompression and 8 compression threads by default
    // the runtime heavily depends on the HiC file and potentially on IO-load
    withName: 'PAIRTOOLS_PARSE' {
        time   = { input.meta.genome_size > 3000000000 ? 7.d : 2.d }
        cpus   = 12
        memory = { input.meta.genome_size > 3000000000 ? 128.GB : 64.GB }
    }

    withName: 'PAIRTOOLS_SORT' {
        time   = { input.meta.genome_size > 3000000000 ? 7.d : 2.d }
        cpus   = { input.meta.genome_size > 3000000000 ? 32 : 16 }
        memory = { input.meta.genome_size > 3000000000 ? 230.GB : 128.GB }
    }

    withName: 'PAIRTOOLS_MERGE' {
        time   = 1d
        cpus   = { ${allpairs}.size() }
        memory = { "${allpairs.size() * 2}.GB" }
    }

    withName: 'PAIRTOOLS_DEDUP' {
        time   = { input.meta.genome_size > 3000000000 ? 2.d : 1.d }
        cpus   = { input.meta.genome_size > 3000000000 ? 16 : 12 }
        memory = { input.meta.genome_size > 3000000000 ? 128.GB : 64.GB }
    }

    withName: 'PAIRTOOLS_SPLIT' {
        time   = { input.meta.genome_size > 3000000000 ? 2.d : 1.d }
        cpus   = { input.meta.genome_size > 3000000000 ? 32 : 16 }
        memory = { input.meta.genome_size > 3000000000 ? 128.GB : 64.GB }
    }

    withName: 'YAHS' {
        time   = { input.meta.genome_size > 3000000000 ? 12.h : 8.h }
        cpus   = 1
        memory = { input.meta.genome_size > 3000000000 ? 96.GB : 12.GB }
    }

    withName: 'FASTK_FASTK' {
        time   = { input.meta.genome_size > 3000000000 ? 4.d : 2.d }
        cpus   = { input.meta.genome_size > 3000000000 ? 72 : 36 }
        memory = { input.meta.genome_size > 3000000000 ? 576.GB : 96.GB }
    }

    withName: 'FASTK_MERGE' {
        time   = { input.meta.genome_size > 3000000000 ? 1.d : 8.h }
        cpus   = { input.meta.genome_size > 3000000000 ? 72 : 36 }
        memory = { input.meta.genome_size > 3000000000 ? 96.GB : 30.GB }
    }

    withName: 'MERYL_COUNT' {
        time   = { input.meta.genome_size > 3000000000 ? 2.d : 1.d }
        cpus   = { input.meta.genome_size > 3000000000 ? 72 : 36 }
        memory = { input.meta.genome_size > 3000000000 ? 288.GB : 64.GB }
    }
    // MERYL_UNIONSUM does not scale well with more threads 
    withName: 'MERYL_UNIONSUM' {
        time   = { input.meta.genome_size > 3000000000 ? 12.h : 8.h }
        cpus   = { input.meta.genome_size > 3000000000 ? 48 : 16 }
        memory = { input.meta.genome_size > 3000000000 ? 96.GB : 64.GB }
    }

    withName: 'MERQURY' {
        time   = { input.meta.genome_size > 3000000000 ? 12.h : 8.h }
        cpus   = { input.meta.genome_size > 3000000000 ? 48 : 16 }
        memory = { input.meta.genome_size > 3000000000 ? 128.GB : 96.GB }
    }

    withName: 'MERQURYFK_MERQURYFK' {
        time   = { input.meta.genome_size > 3000000000 ? 8.h : 4.h }
        cpus   = { input.meta.genome_size > 3000000000 ? 64 : 32 }
        memory = { input.meta.genome_size > 3000000000 ? 96.GB : 64.GB }
    }

    withName: 'MERQURYFK_PLOIDYPLOT' {
        time   = { input.meta.genome_size > 3000000000 ? 8.h : 4.h }
        cpus   = { input.meta.genome_size > 3000000000 ? 96 : 64 }
        memory = { input.meta.genome_size > 3000000000 ? 192.GB : 96.GB }
    }

    withName: 'MINIMAP2_ALIGN_READS' {
        time   = { input.meta.genome_size > 3000000000 ? 1.d : 12.h }
        cpus   = { input.meta.genome_size > 3000000000 ? 64 : 32 }
        memory = { input.meta.genome_size > 3000000000 ? 64.GB : 32.GB }
    }

    withName: 'MINIMAP2_ALIGN_ASSEMBLY_PRIMARY' {
        time   = { input.meta.genome_size > 3000000000 ? 2.d : 1.d }
        cpus   = { input.meta.genome_size > 3000000000 ? 64 : 32 }
        memory = { input.meta.genome_size > 3000000000 ? 64.GB : 32.GB }
    }

    withName: 'BWAMEM2_INDEX' {
        time   = { input.meta.genome_size > 3000000000 ? 1.d : 12.h }
        cpus   = 1
        memory = { input.meta.genome_size > 3000000000 ? 256.GB : 120.GB }
    }

    withName: 'BWAMEM2_MEM' {
        time   = { input.meta.genome_size > 3000000000 ? 1.d : 12.h }
        cpus   = { input.meta.genome_size > 3000000000 ? 96 : 64 }
        memory = { input.meta.genome_size > 3000000000 ? 596.GB : 120.GB }
    }

    withName: 'HIFIASM' {
        time   = { input.meta.genome_size > 3000000000 ? 2.d : 1.d }
        cpus   = { input.meta.genome_size > 3000000000 ? 96 : 46 }
        memory = { input.meta.genome_size > 3000000000 ? 596.GB : 128.GB }
    }

    withName: 'PURGEDUPS_PURGEDUPS_PRIMARY' {
        time   = { input.meta.genome_size > 3000000000 ? 12.h : 8.h }
        cpus   = 1
        memory = { input.meta.genome_size > 3000000000 ? 256.GB : 120.GB }
    }

    withName: 'PURGEDUPS_PBCSTAT' {
        time   = { input.meta.genome_size > 3000000000 ? 2.h : 1.h }
        cpus   = 1
        memory = { input.meta.genome_size > 3000000000 ? 16.GB : 8.GB }
    }
    // scales linearly with genome size
    withName: 'GFASTATS' {
        time   = { input.meta.genome_size > 3000000000 ? 4.h : 1.h }
        cpus   = 1
        memory = { input.meta.genome_size > 3000000000 ? 64.GB : 8.GB }
    }

    // Assembly report
    withName: 'QUARTO' {
        time        = 15.m
    }
    withName: 'MULTIQC' {
        time       = 30.m
    }
}
